buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('com.moowork.gradle:gradle-node-plugin:1.2.0')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.moowork.node'
apply plugin: 'io.spring.dependency-management'

group = 'com.clairvoyant'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-undertow')
    compileOnly("org.springframework.boot:spring-boot-devtools")
    compile('com.rometools:rome:1.9.0')
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile('io.springfox:springfox-swagger-ui:2.8.0')
    compile('io.springfox:springfox-swagger2:2.8.0')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

springBoot {
    buildInfo()
}

node {
    version = "9.6.1"
    download = true
    nodeModulesDir = file("front-end")
}

task cleanResources(type: Delete) {
    delete 'build/resources'
}
task buildClientDev(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile client side folder for development'
    args = ['run', 'buildDev']
}

task buildClient(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = "Compile client side folder for production"
    args = ['run', 'build']
}
task buildClientWatch(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = "Build and watches the client side assets for rebuilding"
    args = ['run', 'buildWatch']
}


bootRun.dependsOn(buildClientDev)
jar.dependsOn(buildClient)

compileJava.dependsOn processResources
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources